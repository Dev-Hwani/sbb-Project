1️⃣ 소스 코드 디렉터리

src/main/java
	- 자바 소스 파일(.java)을 저장하는 공간
	- 패키지 구조에 맞게 파일을 배치

패키지 예시: com.mysite.sbb
	- Spring Boot의 주요 구성 요소들이 위치
	- Controller: URL 요청 처리
	- Service: 비즈니스 로직 처리
	- Repository: DB 접근 및 처리 인터페이스
	- Entity / DTO / Form: 데이터 모델, 데이터 전달 객체, 폼 데이터 처리

SbbApplication.java	
	- 프로젝트 실행 진입점(main 클래스)
	- @SpringBootApplication 애너테이션 필수
	     - 애너테이션을 통해 Spring Boot 애플리케이션을 자동 구성하고 실행 가능
	- Spring Boot 프로젝트 생성 시 자동 생성됨

2️⃣ 리소스 디렉터리

src/main/resources
	- 자바 코드 외의 리소스를 저장하는 공간

templates
	- HTML 템플릿 파일 저장 (Thymeleaf, JSP 등)

static
	- CSS, JS, 이미지 파일 등 정적 리소스 저장

application.properties
	- 프로젝트 환경 설정 파일
	     - 서버 환경 변수, DB 접속 정보 등 설정 가능

3️⃣ 테스트 디렉터리

src/test/java
	- JUnit 및 Spring Boot 테스트 코드를 저장
	- 서버를 실행하지 않고도 main 코드 테스트 가능

4️⃣ 빌드 관리 파일

build.gradle
	- Gradle이 사용하는 프로젝트 환경/빌드 파일
	- Groovy 기반 빌드 도구로 Maven/Ant 단점을 보완
	- 플러그인, 의존 라이브러리, 빌드 설정 등을 작성
	- 예: Spring Boot Web, Lombok, Test 의존성 추가

[Spring Boot vs Django 프로젝트 구조 비교]
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
역할 / 목적			| Django			| Spring Boot							| 비고
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
프로젝트 실행		| manage.py runserver	| SbbApplication.java/gradlew bootRun			| Django: 스크립트, Spring Boot: main 클래스
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
의존성 관리			| requirements.txt		| build.gradle							| Gradle 기반으로 라이브러리 설치 및 빌드
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
환경 설정			| settings.py			| application.properties						| DB, 포트, 환경 변수 등 설정
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
URL → View 매핑		| urls.py			| @Controller + @RequestMapping/@GetMapping		| 요청 처리 경로 정의
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
요청 처리 로직		| views.py			| Controller 클래스							| Django: view 함수, Spring Boot: 메서드
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
비즈니스 로직		| views.py 			| Service 클래스							| Spring Boot에서는 별도 Service로 분리 가능
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DB 접근 / 모델 정의	| models.py			| Repository 인터페이스 + Entity 클래스			| Spring Boot: JPA 사용
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
템플릿 / 화면		| templates/			| resource/templates/						| HTML 파일 위치
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
정적 리소스			| static/			| resource/static/							| CSS, JS, 이미지 파일 위치
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
테스트 코드			| test.py			| src/test/java/							| JUnit 또는 Spring Boot 테스트
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------


